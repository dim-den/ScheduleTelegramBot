# - *- coding: utf- 8 - *-

import config
import telebot
import random
import datetime
import calendar
import pytz
import os, sys
import database
import logger
import time
from database import User
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from telebot import types

bot = telebot.TeleBot(config.token)  # here you need your personal token
logger = logger.get_logger("bot")
user_dict = {}


def get_time():
    return datetime.datetime.now(pytz.timezone('Europe/Minsk'))

def get_week_number(date=get_time()):
    if date.isocalendar()[1] % 2 == 1:
        return 1;
    return 2;

def shrink_command(input):
    i = input.find('@')
    if i != -1:
        return input[1:i]
    return input[1:]

def get_main_inline_markup():
    markup = InlineKeyboardMarkup()
    markup.row_width = 3
    markup.add(InlineKeyboardButton("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"),
               InlineKeyboardButton("–í—Ç–æ—Ä–Ω–∏–∫", callback_data="–í—Ç–æ—Ä–Ω–∏–∫"),
               InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data="–°—Ä–µ–¥–∞"))

    markup.add(InlineKeyboardButton("–ß–µ—Ç–≤–µ—Ä–≥", callback_data="–ß–µ—Ç–≤–µ—Ä–≥"),
               InlineKeyboardButton("–ü—è—Ç–Ω–∏—Ü–∞", callback_data="–ü—è—Ç–Ω–∏—Ü–∞"),
               InlineKeyboardButton("–°—É–±–±–æ—Ç–∞", callback_data="–°—É–±–±–æ—Ç–∞"))

    markup.add(InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="–°–µ–≥–æ–¥–Ω—è"),
               InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="–ó–∞–≤—Ç—Ä–∞"))

    return markup

def get_main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞')
    markup.row('–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞')
    markup.row('–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–°–±—Ä–æ—Å')
    return markup

def get_course_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('1', '2', '3', '4')
    return markup


def get_group_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('1', '2', '3', '4', '5', '6')
    markup.row('7', '8', '9', '10', '11', '12')
    return markup


def get_subgroup_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.row('1', '2')
    return markup


def process_course(message):
    try:
        id = message.chat.id
        user = User(int(id))
        course = message.text
        if not course.isdigit() or int(course) > 4 or int(course) < 1:
            raise Exception("–ù–µ –≤–µ—Ä–Ω—ã–π –∫—É—Ä—Å")
        user.course = int(course)
        user_dict[id] = user
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É', reply_markup=get_group_markup())
        bot.register_next_step_handler(msg, process_group_step)
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


def process_group_step(message):
    try:
        id = message.chat.id
        user = user_dict[id]
        group = message.text
        if not group.isdigit() or int(group) > 12 or int(group) < 1:
            raise Exception("–ù–µ –≤–µ—Ä–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        user.idgroup = int(group)
        msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É', reply_markup=get_subgroup_markup())
        bot.register_next_step_handler(msg, process_subgroup_step)
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


def process_subgroup_step(message):
    try:
        id = message.chat.id
        user = user_dict[id]
        subgroup = message.text
        if subgroup != '1' and subgroup != '2':
            raise Exception("–ù–µ –≤–µ—Ä–Ω–∞—è –ø–æ–¥–≥—Ä—É–ø–ø–∞")
        user.subgroup = int(subgroup)
        user.last_message = get_time()
        user.username = message.chat.username
        user.first_name = message.chat.first_name
        user.last_name = message.chat.last_name

        if database.getuser(id) == None:
            database.adduser(user)
        else:
            database.updateuser(user)
        user_dict.pop(id)

        bot.send_message(id, '–°–ø–∞—Å–∏–±–æ, –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –≤–∞–º –¥–µ–Ω—å!', reply_markup=get_main_markup())
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


def registration_begin(message):
    msg = bot.reply_to(message, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å', reply_markup=get_course_markup())
    bot.register_next_step_handler(msg, process_course)


def get_user(message):
    user = database.getuser(message.chat.id)
    if user == None:
        user = registration(message)
    else:
        user.last_message = get_time()
        user.username = message.chat.username
        user.first_name = message.chat.first_name
        user.last_name = message.chat.last_name
        database.updateuser(user)
    return user


def registration(message):
    bot.reply_to(message, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!')
    registration_begin(message)
    return database.getuser(message.chat.id)

def get_week_day_schedule(week_day, user):
    current_week_day = get_time().weekday()
    week = get_week_number()

    if current_week_day > database.day_number[week_day.lower()]:
        week = 2 if week == 1 else 1
        return "<b>{0} –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ:</b>\n{1}".format(week_day, database.getschedule(user.course, user.idgroup,
                                                                                            user.subgroup,
                                                                                            database.day_number[
                                                                                                week_day.lower()],
                                                                                            week))

    return "<b>{0}:</b>\n{1}".format(week_day, database.getschedule(user.course, user.idgroup, user.subgroup,
                                                                    database.day_number[week_day.lower()], week))


def bot_send_message_with_keyboard(chat_id, message_text, parse_mode='html'):
    bot.send_message(chat_id,
                     message_text,
                     parse_mode=parse_mode,
                     reply_markup=get_main_inline_markup())



@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    try:
        message = call.message
        message_text = call.data

        user = get_user(message)
        logger.info("{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name,
                                              message_text))

        if message_text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']:
            bot_send_message_with_keyboard(message.chat.id, get_week_day_schedule(message_text, user))
        elif message_text == '–°–µ–≥–æ–¥–Ω—è':
            weekday = get_time().weekday()
            if weekday == 6:
                bot_send_message_with_keyboard(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
            else:
                bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format(message_text,
                                                                            database.getschedule(user.course,
                                                                                                 user.idgroup,
                                                                                                 user.subgroup, weekday,
                                                                                                 get_week_number())))
        elif message_text == '–ó–∞–≤—Ç—Ä–∞':
            tomorrow = get_time() + datetime.timedelta(days=1)
            weekday = tomorrow.weekday()
            if weekday == 6:
                bot_send_message_with_keyboard(message.chat.id, "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
            else:
                bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format(message_text,
                                                                            database.getschedule(user.course,
                                                                                                 user.idgroup,
                                                                                                 user.subgroup, weekday,
                                                                                                 get_week_number(
                                                                                                     tomorrow))))
        elif message.chat.type == 'private':
            bot_send_message_with_keyboard(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message_text, e))


@bot.message_handler(commands=['start'])
def welcome(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    try:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ò–¢ –ë–ì–¢–£.".format(
                             message.from_user, bot.get_me()), parse_mode='html')
        registration(message)
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


@bot.message_handler(commands=['reset'])
def reset(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    try:
        bot.reply_to(message, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫!')
        registration(message)
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


@bot.message_handler(commands=['help'])
def help(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    header = "–Ø - <b>{0.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ò–¢ –ë–ì–¢–£.".format(
        bot.get_me())
    contact = "–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –±–∞–≥ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å, –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @dmtr_den. –ù–∏–∫ –Ω–∞ github: dim-den ";
    commands = '''<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞</b>:
	/help - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ, –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞—Ö
	/reset - —Å–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞, –≥—Ä—É–ø–ø—ã, –ø–æ–¥–≥—Ä—É–ø–ø—ã
	/start - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	/today - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
	/tomorrow - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
	/monday - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
	/tuesday - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫
	/wednesday - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ä–µ–¥—É
	/thursday- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥
	/friday - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É
	/saturday - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—É–±–±–æ—Ç—É
	'''
    post = 'P.S. –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —Ä–∞–±–æ—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã –æ–ø–∏—Å–∞–Ω—ã–µ –≤—ã—à–µ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)'
    bot.send_message(message.chat.id, "{0}\n\n{1}\n\n{2}\n\n{3}".format(header, contact, commands, post),
                     parse_mode='html')


@bot.message_handler(commands=['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'])
def weekday(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    try:
        user = get_user(message)
        day = database.eng_ru[shrink_command(message.text)]
        bot_send_message_with_keyboard(message.chat.id, get_week_day_schedule(day.title(), user))
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


@bot.message_handler(commands=['today'])
def today(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    try:
        user = get_user(message)
        weekday = get_time().weekday()
        if weekday == 6:
            bot_send_message_with_keyboard(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
        else:
            bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format('–°–µ–≥–æ–¥–Ω—è',
                                                                        database.getschedule(user.course, user.idgroup,
                                                                                             user.subgroup, weekday,
                                                                                             get_week_number())))
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


@bot.message_handler(commands=['tomorrow'])
def tomorrow(message):
    logger.info(
        "{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name, message.text))
    try:
        user = get_user(message)
        tomorrow = get_time() + datetime.timedelta(days=1)
        weekday = tomorrow.weekday()
        if weekday == 6:
            bot_send_message_with_keyboard(message.chat.id, "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
        else:
            bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format('–ó–∞–≤—Ç—Ä–∞',
                                                                        database.getschedule(user.course, user.idgroup,
                                                                                             user.subgroup, weekday,
                                                                                             get_week_number(
                                                                                                 tomorrow))))
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


@bot.message_handler(content_types=['text'])
def callback(message):
    try:
        user = get_user(message)
        logger.info("{0}|{1}|{2}: {3}".format(message.chat.username, message.chat.first_name, message.chat.last_name,
                                              message.text))

        if message.text in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']:
            bot_send_message_with_keyboard(message.chat.id, get_week_day_schedule(message.text, user))
        elif message.text == '–°–µ–≥–æ–¥–Ω—è':
            weekday = get_time().weekday()
            if weekday == 6:
                bot_send_message_with_keyboard(message.chat.id, "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
            else:
                bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format(message.text,
                                                                            database.getschedule(user.course,
                                                                                                 user.idgroup,
                                                                                                 user.subgroup, weekday,
                                                                                                 get_week_number())))
        elif message.text == '–ó–∞–≤—Ç—Ä–∞':
            tomorrow = get_time() + datetime.timedelta(days=1)
            weekday = tomorrow.weekday()
            if weekday == 6:
                bot_send_message_with_keyboard(message.chat.id, "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π :)\n")
            else:
                bot_send_message_with_keyboard(message.chat.id, "<b>{0}:</b>\n{1}".format(message.text,
                                                                            database.getschedule(user.course,
                                                                                                 user.idgroup,
                                                                                                 user.subgroup, weekday,
                                                                                                 get_week_number(
                                                                                                     tomorrow))))
        elif message.text == '–°–±—Ä–æ—Å':
            bot.reply_to(message, '–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫!')
            registration(message)
        elif message.text.lower() == 'anime' or message.text.lower() == '–∞–Ω–∏–º–µ':
            bot.reply_to(message, 'c–∏–ª–∞ !')
        elif message.chat.type == 'private':
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
    except Exception as e:
        bot.reply_to(message, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :/ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help')
        logger.error("{0}|{1}|{2}: {3} - ERROR_MSG: {4}".format(message.chat.username, message.chat.first_name,
                                                                message.chat.last_name, message.text, e))


def main():
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    # bot.polling(none_stop=True)

    except Exception as e:
        logger.error("INTERNAL ERROR - ERROR_MSG: {0}".format(e))
        time.sleep(15)


if __name__ == '__main__':
    main()
